/**
 * ENV-CONFIG.JS - Environment Configuration for Production
 * This file should be generated by your build process or hosting provider
 * 
 * FOR PRODUCTION DEPLOYMENT:
 * 1. Replace these values with your actual environment variables
 * 2. Never commit real production credentials to version control
 * 3. Use your hosting provider's environment variable system
 */

// Check if we're in a browser environment
const isBrowser = typeof window !== 'undefined';

// Get environment variables from different sources
const getEnvVar = (key, defaultValue = '') => {
  // Try process.env first (Node.js/build time)
  if (typeof process !== 'undefined' && process.env && process.env[key]) {
    return process.env[key];
  }
  
  // Try window.env (runtime injection)
  if (isBrowser && window.env && window.env[key]) {
    return window.env[key];
  }
  
  // Try meta tags (HTML injection method)
  if (isBrowser) {
    const metaTag = document.querySelector(`meta[name="config:${key}"]`);
    if (metaTag) {
      return metaTag.getAttribute('content');
    }
  }
  
  return defaultValue;
};

// Environment configuration object
const ENV_CONFIG = {
  // Firebase Configuration (set these in your hosting environment)
  FIREBASE_API_KEY: getEnvVar('FIREBASE_API_KEY'),
  FIREBASE_AUTH_DOMAIN: getEnvVar('FIREBASE_AUTH_DOMAIN'),
  FIREBASE_PROJECT_ID: getEnvVar('FIREBASE_PROJECT_ID'),
  FIREBASE_STORAGE_BUCKET: getEnvVar('FIREBASE_STORAGE_BUCKET'),
  FIREBASE_MESSAGING_SENDER_ID: getEnvVar('FIREBASE_MESSAGING_SENDER_ID'),
  FIREBASE_APP_ID: getEnvVar('FIREBASE_APP_ID'),
  FIREBASE_MEASUREMENT_ID: getEnvVar('FIREBASE_MEASUREMENT_ID'),
  
  // Application Configuration
  APP_NAME: getEnvVar('APP_NAME', 'Flutter Developer Portfolio'),
  APP_VERSION: getEnvVar('APP_VERSION', '1.0.0'),
  APP_URL: getEnvVar('APP_URL', 'https://yourportfolio.com'),
  
  // Contact Configuration
  CONTACT_EMAIL: getEnvVar('CONTACT_EMAIL', 'your.email@example.com'),
  CONTACT_PHONE: getEnvVar('CONTACT_PHONE', '+1 (234) 567-890'),
  CONTACT_LOCATION: getEnvVar('CONTACT_LOCATION', 'Your City, Country'),
  
  // Personal Information
  DEVELOPER_NAME: getEnvVar('DEVELOPER_NAME', 'Your Name'),
  DEVELOPER_TITLE: getEnvVar('DEVELOPER_TITLE', 'Flutter Developer'),
  DEVELOPER_BIO: getEnvVar('DEVELOPER_BIO', 'Passionate Flutter developer creating beautiful mobile applications'),
  
  // Social Media Links
  GITHUB_URL: getEnvVar('GITHUB_URL', 'https://github.com/yourusername'),
  LINKEDIN_URL: getEnvVar('LINKEDIN_URL', 'https://linkedin.com/in/yourusername'),
  TWITTER_URL: getEnvVar('TWITTER_URL', 'https://twitter.com/yourusername'),
  PORTFOLIO_URL: getEnvVar('PORTFOLIO_URL', 'https://yourportfolio.com'),
  
  // Feature Flags
  ENABLE_ANALYTICS: getEnvVar('ENABLE_ANALYTICS', 'true') === 'true',
  ENABLE_CONTACT_FORM: getEnvVar('ENABLE_CONTACT_FORM', 'true') === 'true',
  ENABLE_ADMIN_PANEL: getEnvVar('ENABLE_ADMIN_PANEL', 'true') === 'true',
  ENABLE_PWA: getEnvVar('ENABLE_PWA', 'false') === 'true',
  ENABLE_DARK_MODE: getEnvVar('ENABLE_DARK_MODE', 'false') === 'true',
  
  // Performance Settings
  MAX_IMAGE_SIZE: parseInt(getEnvVar('MAX_IMAGE_SIZE', '5242880')), // 5MB
  MAX_IMAGES_PER_PROJECT: parseInt(getEnvVar('MAX_IMAGES_PER_PROJECT', '10')),
  PAGINATION_SIZE: parseInt(getEnvVar('PAGINATION_SIZE', '6')),
  
  // Security Settings
  MAX_LOGIN_ATTEMPTS: parseInt(getEnvVar('MAX_LOGIN_ATTEMPTS', '5')),
  LOGIN_RATE_LIMIT_WINDOW: parseInt(getEnvVar('LOGIN_RATE_LIMIT_WINDOW', '300000')), // 5 minutes
  CONTACT_RATE_LIMIT: parseInt(getEnvVar('CONTACT_RATE_LIMIT', '3')),
  CONTACT_RATE_LIMIT_WINDOW: parseInt(getEnvVar('CONTACT_RATE_LIMIT_WINDOW', '3600000')), // 1 hour
  
  // Development/Debug Settings
  NODE_ENV: getEnvVar('NODE_ENV', 'production'),
  DEBUG_MODE: getEnvVar('NODE_ENV', 'production') === 'development',
  LOG_LEVEL: getEnvVar('LOG_LEVEL', 'info'),
  SHOW_CONSOLE_LOGS: getEnvVar('SHOW_CONSOLE_LOGS', 'false') === 'true',
  
  // CDN and Asset URLs
  CDN_URL: getEnvVar('CDN_URL', ''),
  ASSETS_URL: getEnvVar('ASSETS_URL', './assets'),
  IMAGES_URL: getEnvVar('IMAGES_URL', './assets/images'),
  
  // Third-party Services
  GOOGLE_ANALYTICS_ID: getEnvVar('GOOGLE_ANALYTICS_ID'),
  RECAPTCHA_SITE_KEY: getEnvVar('RECAPTCHA_SITE_KEY'),
  EMAILJS_SERVICE_ID: getEnvVar('EMAILJS_SERVICE_ID'),
  EMAILJS_TEMPLATE_ID: getEnvVar('EMAILJS_TEMPLATE_ID'),
  EMAILJS_PUBLIC_KEY: getEnvVar('EMAILJS_PUBLIC_KEY'),
  
  // Build Information (set by build process)
  BUILD_DATE: getEnvVar('BUILD_DATE', new Date().toISOString()),
  BUILD_VERSION: getEnvVar('BUILD_VERSION', '1.0.0'),
  GIT_COMMIT: getEnvVar('GIT_COMMIT', 'unknown'),
};

// Validation function
const validateEnvironment = () => {
  const requiredVars = [
    'FIREBASE_API_KEY',
    'FIREBASE_AUTH_DOMAIN',
    'FIREBASE_PROJECT_ID'
  ];
  
  const missing = requiredVars.filter(varName => !ENV_CONFIG[varName]);
  
  if (missing.length > 0) {
    console.error('Missing required environment variables:', missing);
    
    // Show user-friendly error in production
    if (!ENV_CONFIG.DEBUG_MODE) {
      showEnvironmentError(missing);
    }
    
    return false;
  }
  
  return true;
};

// Show environment error to user
const showEnvironmentError = (missingVars) => {
  if (!isBrowser) return;
  
  const errorBanner = document.createElement('div');
  errorBanner.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    background: #fee2e2;
    color: #dc2626;
    padding: 1rem;
    text-align: center;
    z-index: 9999;
    border-bottom: 1px solid #fecaca;
    font-family: -apple-system, BlinkMacSystemFont, sans-serif;
    font-size: 14px;
  `;
  
  errorBanner.innerHTML = `
    <strong>Configuration Error:</strong> 
    Missing required environment variables. Please contact the site administrator.
    ${ENV_CONFIG.DEBUG_MODE ? `<br><small>Missing: ${missingVars.join(', ')}</small>` : ''}
  `;
  
  document.body.insertBefore(errorBanner, document.body.firstChild);
};

// Get configuration value with type conversion
const getConfig = (key, defaultValue = null) => {
  const value = ENV_CONFIG[key];
  if (value === undefined || value === null || value === '') {
    return defaultValue;
  }
  return value;
};

// Get boolean configuration
const getBooleanConfig = (key, defaultValue = false) => {
  const value = getConfig(key, defaultValue);
  if (typeof value === 'boolean') return value;
  if (typeof value === 'string') return value.toLowerCase() === 'true';
  return defaultValue;
};

// Get numeric configuration
const getNumericConfig = (key, defaultValue = 0) => {
  const value = getConfig(key, defaultValue);
  const parsed = parseInt(value, 10);
  return isNaN(parsed) ? defaultValue : parsed;
};

// Export to global scope if in browser
if (isBrowser) {
  window.ENV = ENV_CONFIG;
  window.getConfig = getConfig;
  window.getBooleanConfig = getBooleanConfig;
  window.getNumericConfig = getNumericConfig;
  window.validateEnvironment = validateEnvironment;
  
  // Auto-validate on load
  document.addEventListener('DOMContentLoaded', () => {
    validateEnvironment();
    
    // Development helper
    if (ENV_CONFIG.DEBUG_MODE && ENV_CONFIG.SHOW_CONSOLE_LOGS) {
      console.group('ðŸ”§ Environment Configuration');
      console.log('Environment:', ENV_CONFIG.NODE_ENV);
      console.log('Debug Mode:', ENV_CONFIG.DEBUG_MODE);
      console.log('App Version:', ENV_CONFIG.APP_VERSION);
      console.log('Build Date:', ENV_CONFIG.BUILD_DATE);
      console.log('Firebase Project:', ENV_CONFIG.FIREBASE_PROJECT_ID || '[NOT SET]');
      console.log('Features:', {
        Analytics: ENV_CONFIG.ENABLE_ANALYTICS,
        ContactForm: ENV_CONFIG.ENABLE_CONTACT_FORM,
        AdminPanel: ENV_CONFIG.ENABLE_ADMIN_PANEL,
        PWA: ENV_CONFIG.ENABLE_PWA,
        DarkMode: ENV_CONFIG.ENABLE_DARK_MODE
      });
      console.groupEnd();
    }
  });
}

// Export for Node.js environments
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    ENV_CONFIG,
    getConfig,
    getBooleanConfig,
    getNumericConfig,
    validateEnvironment
  };
}